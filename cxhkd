#!/usr/bin/env python3
import argparse
import gi
import importlib.util
import os
import re
import sys
import Xlib
from functools import reduce
from itertools import combinations
from signal import signal, SIGINT, SIGTERM, SIGHUP
from typing import Dict, Tuple, List
from xdg import BaseDirectory
from Xlib import X
from Xlib.display import Display
from Xlib.protocol import rq
gi.require_version('Gtk', '3.0');from gi.repository import Gtk, Gdk, GLib, Gio
parser = argparse.ArgumentParser()
parser.add_argument('-v', '--version', required=False, action='store_true', help='print the version')
parser.add_argument('-a', '--autostart', required=False, action='store_true', help='write autostart file')
args = parser.parse_args()

if args.version:
	print('0.1')
	exit(0)

if args.autostart:
	from xdg import DesktopEntry as Desktop
	file = os.path.join(BaseDirectory.save_config_path("autostart"), 'cxhkd.desktop')
	entry = Desktop.DesktopEntry(file)
	entry.set('X-GNOME-Autostart-enabled', 'true')
	entry.set('Name', 'cxhkd')
	entry.set('Icon', 'cxhkd')
	entry.set('Exec', 'cxhkd')
	entry.write(file)
	exit(0)


class Key:

	def __init__(self, code: int, mask: int, function=None, children=()):
		self.code = code
		self.mask = normalize(mask)
		self.id = (self.code, self.mask)
		self.function = function
		self.children = children


class Context:

	def __init__(self, level: int, key: Key = None):
		self.level = level
		self.key = key
		self.children: Dict[Tuple, Context] = {}

	def bind(self, key: Key):

		if key.id in self.children:
			raise Exception('key code: {} mask: {} is already bound'.format(key.code, key.mask))

		context = Context(level=self.level + 1, key=key)

		self.children[key.id] = context

		for child in key.children:
			context.bind(child)


class gdk:

	_display = Gdk.Display.get_default()
	keymap = Gdk.Keymap.get_for_display(_display)

	def __enter__(self):
		self._display.error_trap_push()
		return self

	def __exit__(self, _type, exception, exception_traceback):
		try:
			error = self._display.error_trap_pop()
			if error:
				raise Exception('X11 Error code {}'.format(error)) from exception
		finally:
			self._display.close()


def normalize(state) -> int: return state & id_masks


def run(cmd): return lambda: Gio.DesktopAppInfo.create_from_commandline(
			commandline=cmd, application_name=None, flags=Gio.AppInfoCreateFlags.NONE
		).launch_uris_as_manager(uris=[], launch_context=None, spawn_flags=GLib.SpawnFlags.DEFAULT)


def read(_config, keymap):
	keys: List[Key] = []
	for name in [item for item in dir(_config) if not item.startswith("__")]:

		accelerator = re.sub(r'(?i)(alt|ctrl|meta|shift|super)_', r'<\1>', name)
		key, codes, modifier_masks = Gtk.accelerator_parse_with_keycode(accelerator)

		if not key:
			continue

		if len(codes) != 1:
			raise Exception('Accelerator not supported: {}'.format(accelerator))

		mapped_the_same, non_virtual_counterpart = keymap.map_virtual_modifiers(modifier_masks)
		modifier_masks = non_virtual_counterpart
		attr = getattr(_config, name)

		if isinstance(attr, str):
			keys.append(Key(codes[0], modifier_masks, function=run(attr)))
		elif callable(attr):
			keys.append(Key(codes[0], modifier_masks, function=attr, children=read(attr, keymap)))
		else:
			raise Exception('Invalid accelerator attribute')

	return keys


def advance_key_streak(key_id: Tuple, time):
	global pointer, temporary_grab
	pointer = pointer.children[key_id]
	if not temporary_grab:
		window.grab_keyboard(True, X.GrabModeAsync, X.GrabModeAsync, time)
		temporary_grab = True


def reset_key_streak(time):
	global pointer, temporary_grab
	pointer = root
	if temporary_grab:
		display.ungrab_keyboard(time)
		temporary_grab = False


def close(sig, frame):
	display.close()
	sys.exit(0)


# MASKS
id_masks = X.ControlMask | X.ShiftMask | X.Mod1Mask | X.Mod4Mask
noise = (X.Mod2Mask, X.Mod3Mask, X.LockMask)
noise_combinations = reduce(lambda x, y: x + y, map(lambda r: list(combinations(noise, r)), [0, 1, 2, 3]))
noise_combination_masks = set(map(lambda combination: reduce(lambda x, y: x | y, combination, 0), noise_combinations))

# READ CONFIG
path = os.path.join(BaseDirectory.save_config_path('cxhkd'), 'cxhkd.py')
spec = importlib.util.spec_from_file_location('config', path)
config = importlib.util.module_from_spec(spec)
spec.loader.exec_module(config)
with gdk() as gdk_context:
	user_keys: List[Key] = read(config, gdk_context.keymap)

# CONNECT TO XORG
display = Display()
window = display.screen().root
modifier_keycodes = reduce(lambda x, y: x.union(y), display.get_modifier_mapping(), set())
signal(SIGINT,  close)
signal(SIGTERM, close)
signal(SIGHUP,  close)

# INSTALL CXHKD
for user_key in user_keys:
	for noise_combination_mask in noise_combination_masks:

		display.set_error_handler(
			lambda *a: print(
				'unable to grab key code {} mask {} noise {}'.format(user_key.code, user_key.mask, noise_combination_mask)))

		window.grab_key(user_key.code, user_key.mask | noise_combination_mask, True, X.GrabModeAsync, X.GrabModeAsync)

		display.sync()

display.set_error_handler(lambda exc, req: print(exc, file=sys.stderr))
window.change_attributes(event_mask=X.KeyPressMask)

# INITIALIZE
root = Context(level=0)
for user_key in user_keys:
	root.bind(user_key)
pointer = root
temporary_grab = False


# START
def handle(_event: Xlib.protocol.event.KeyPress):

	_id = (_event.detail, normalize(_event.state))

	if _id in pointer.children and pointer.children[_id].key.function:
		pointer.children[_id].key.function()

	if _id in pointer.children and pointer.children[_id].children:
		advance_key_streak(_id, _event.time)
	elif _event.detail not in modifier_keycodes:
		reset_key_streak(_event.time)


while True:

	event = display.next_event()

	if event.type == X.KeyPress:

		handle(event)
